// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        Int   @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String   @unique
  city      String
  state     String
  country   String
  pincode   String
  password  String
  image     String?
  role      String   @default("user")
  bookings   Booking[]
}

model Vehicle {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  price          Float
  primaryImage   String        // Path to primary image
  secondaryImage String?
  isRentable     Boolean        @default(false)
  availableQty   Int
  manufacturer   Manufacturer  @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  manufacturerId Int
  model          Model         @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId        Int
  bookings   Booking[]
  otherImages  String[]
}

model Test{
  id    Int      @id @default(autoincrement())
  name  String
otherImages  String[]
}

model Manufacturer {
  id       Int       @id @default(autoincrement())
  name     String
  image    String
  vehicles Vehicle[] 
  models   Model[]   
}

model Model {
  id             Int           @id @default(autoincrement())
  name           String
  manufacturer   Manufacturer   @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  manufacturerId Int
  vehicles       Vehicle[]
}

model Booking {
  id                   Int      @id @default(autoincrement())
  pickupDate           DateTime 
  pickupTime           String
  dropoffDate          DateTime 
  dropoffTime          String  
  status               String
  pickupLocation       String
  dropoffLocation      String
  paymentStatus        String   @default("pending")
  amount               Float     
  razorpayPaymentId    String?  
  razorpaySignature    String? 
  vehicle              Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId            Int
  customer             Customer  @relation(fields: [customerId], references: [id])
  customerId           Int
  createdAt            DateTime @default(now())
}






